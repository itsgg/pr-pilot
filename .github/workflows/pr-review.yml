name: PR-Pilot Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review (optional)'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (no comments posted)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  pr-review:
    name: AI-Powered PR Review
    runs-on: ubuntu-latest
    
    # Only run on pull requests, not on pushes to main
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better diff analysis
          fetch-depth: 0
          # Use the PR head for workflow_dispatch
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          echo "Dependencies installed successfully"

      - name: Run tests
        run: |
          echo "Running unit tests..."
          npm test
          echo "All tests passed ‚úÖ"

      - name: Lint code
        run: |
          echo "Running code linting..."
          npx prettier --check "**/*.js" "**/*.json" "**/*.yml" "**/*.yaml" "**/*.md" || {
            echo "Code formatting issues found. Run 'npx prettier --write .' to fix."
            exit 1
          }
          echo "Code linting passed ‚úÖ"

      - name: Validate configuration
        run: |
          echo "Validating configuration..."
          node -e "
            import { loadConfig } from './agent/lib/config.js';
            try {
              const config = await loadConfig('config/agent.yaml');
              console.log('‚úÖ Configuration is valid');
              console.log('Model:', config.model);
              console.log('Max tokens:', config.max_tokens);
              console.log('Cost cap: $' + config.cost_cap_usd);
              console.log('Max files:', config.max_files);
            } catch (error) {
              console.error('‚ùå Configuration validation failed:', error.message);
              process.exit(1);
            }
          "

      - name: Check environment variables
        run: |
          echo "Checking environment variables..."
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "‚ùå ANTHROPIC_API_KEY is not set"
            exit 1
          fi
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå GITHUB_TOKEN is not set"
            exit 1
          fi
          echo "‚úÖ Environment variables are set"

      - name: Determine PR number
        id: pr-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.pr_number }}" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT
            echo "Using PR number from workflow dispatch: ${{ github.event.inputs.pr_number }}"
          else
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
            echo "dry_run=false" >> $GITHUB_OUTPUT
            echo "Using PR number from pull request event: ${{ github.event.pull_request.number }}"
          fi

      - name: Run PR-Pilot Review
        id: review
        run: |
          echo "üöÄ Starting PR-Pilot review..."
          echo "PR Number: ${{ steps.pr-info.outputs.pr_number }}"
          echo "Repository: ${{ steps.pr-info.outputs.repository }}"
          echo "Dry Run: ${{ steps.pr-info.outputs.dry_run }}"
          
          # Set environment variables for the review
          export PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          export REPOSITORY="${{ steps.pr-info.outputs.repository }}"
          export DRY_RUN="${{ steps.pr-info.outputs.dry_run }}"
          
          # Run the review
          if [ "${{ steps.pr-info.outputs.dry_run }}" = "true" ]; then
            echo "Running in dry-run mode (no comments will be posted)"
            node agent/reviewer.js --dry-run --pr "${{ steps.pr-info.outputs.pr_number }}" --repo "${{ steps.pr-info.outputs.repository }}"
          else
            echo "Running in live mode (comments will be posted)"
            node agent/reviewer.js --pr "${{ steps.pr-info.outputs.pr_number }}" --repo "${{ steps.pr-info.outputs.repository }}"
          fi
          
          echo "‚úÖ PR-Pilot review completed"

      - name: Upload metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-pilot-metrics-${{ steps.pr-info.outputs.pr_number }}-${{ github.run_number }}
          path: metrics/run.json
          retention-days: 30

      - name: Comment on PR with results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read metrics if available
            let metrics = null;
            try {
              const metricsPath = path.join(process.cwd(), 'metrics', 'run.json');
              if (fs.existsSync(metricsPath)) {
                metrics = JSON.parse(fs.readFileSync(metricsPath, 'utf8'));
              }
            } catch (error) {
              console.log('Could not read metrics:', error.message);
            }
            
            // Determine status
            const reviewStep = context.payload.workflow_run?.conclusion || 'success';
            const isSuccess = reviewStep === 'success';
            
            // Create comment
            let comment = `## ü§ñ PR-Pilot Review Results\n\n`;
            
            if (isSuccess) {
              comment += `‚úÖ **Review completed successfully**\n\n`;
              
              if (metrics) {
                comment += `### üìä Review Statistics\n`;
                comment += `- **Files reviewed**: ${metrics.files_reviewed || 0}\n`;
                comment += `- **Issues found**: ${metrics.issues_found || 0}\n`;
                comment += `- **Comments posted**: ${metrics.comments_posted || 0}\n`;
                comment += `- **Estimated cost**: $${(metrics.est_cost_usd || 0).toFixed(4)}\n`;
                comment += `- **Review time**: ${metrics.time_to_first_feedback_sec || 0}s\n`;
                
                if (metrics.issues_by_category) {
                  comment += `\n### üè∑Ô∏è Issues by Category\n`;
                  Object.entries(metrics.issues_by_category).forEach(([category, count]) => {
                    const emoji = {
                      'bug': 'üêõ',
                      'style': 'üíÖ',
                      'security': 'üîí',
                      'perf': '‚ö°',
                      'test': 'üß™'
                    }[category] || 'üìù';
                    comment += `- ${emoji} **${category}**: ${count}\n`;
                  });
                }
              }
            } else {
              comment += `‚ùå **Review failed**\n\n`;
              comment += `The PR-Pilot review encountered an error. Please check the workflow logs for details.\n`;
            }
            
            comment += `\n---\n`;
            comment += `*This comment was automatically generated by PR-Pilot v1.0.0*\n`;
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail workflow if review failed
        if: failure()
        run: |
          echo "‚ùå PR-Pilot review failed"
          echo "Please check the logs above for error details"
          exit 1

  # Optional: Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate || {
            echo "‚ö†Ô∏è Security vulnerabilities found. Please review and fix."
            echo "Run 'npm audit fix' to automatically fix some issues."
          }

      - name: Check for secrets
        run: |
          echo "Checking for potential secrets in code..."
          if grep -r -i "api[_-]key\|secret\|password\|token" --include="*.js" --include="*.json" --include="*.yml" --include="*.yaml" . | grep -v node_modules | grep -v ".github/workflows" | grep -v ".env.example"; then
            echo "‚ö†Ô∏è Potential secrets found in code. Please review."
            exit 1
          else
            echo "‚úÖ No obvious secrets found in code"
          fi

  # Optional: Performance test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance test
        run: |
          echo "Running performance test..."
          time node -e "
            import { PRReviewer } from './agent/reviewer.js';
            const reviewer = new PRReviewer({ dryRun: true });
            console.log('‚úÖ PRReviewer instantiated successfully');
          "
          echo "‚úÖ Performance test completed"
